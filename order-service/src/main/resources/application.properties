spring.application.name=order-service

spring.datasource.url=jdbc:mysql://localhost:3317/order_service
spring.datasource.password=
spring.datasource.username=
#We are using flyway migrations to handle our creation of tables, fields , migrations
#Use V<number>_<name>.sql as the format to write your migrations scripts in the db/migration folder
spring.jpa.hibernate.ddl-auto=none

#i.e http://localhost:8081/swagger-ui.html to access the documentation (note this is for the one in html form)
springdoc.swagger-ui.path=/swagger-ui.html
#i.e http://localhost:8081/api-docs to access the documentation (note this is for the one in json form)
springdoc.api-docs.path=/api-docs

server.port=8081

inventory.url=http://localhost:8082


#adding this to a particular instance of our rest client that is why the name inventory is there, and also the name of our rest client is inventory, hence that name
# register health Indicator because we want to see the different States of circuitbreaker
resilience4j.circuitbreaker.instances.inventory.registerHealthIndicator=true
# how much buffer size is going to for the event
resilience4j.circuitbreaker.instances.inventory.event-consumer-buffer-size=10
#so as to be able to determine when to open and close the
# circuitbreaker based on the number of requests then we use a slidingWindowType mechanism
resilience4j.circuitbreaker.instances.inventory.sliding-window-type=COUNT_BASED
#After 5 failed requests the sliding window will change the close to open state
resilience4j.circuitbreaker.instances.inventory.sliding-window-size=5
resilience4j.circuitbreaker.instances.inventory.failure-rate-threshold=50
#secs to stay in the open state before it goes to half-open state
resilience4j.circuitbreaker.instances.inventory.wait-duration-in-open-state=5s
#how many calls you have to allow in the half-open state to check if connection is now good
resilience4j.circuitbreaker.instances.inventory.permitted-number-of-calls-in-half-open-state=3
#self explanatory
resilience4j.circuitbreaker.instances.inventory.automatic-transition-from-open-to-half-open-enabled=true
resilience4j.circuitbreaker.instance.inventory.minimum-number-of-calls=5

#Resilience4J Timeout Properties
#time to wait for the method that is annotated with the Timelimiter to execute before it executes the fallback method
resilience4j.timelimiter.instances.inventory.timeout-duration=3s

resilience4j.retry.instances.inventory.max-attempts=3
resilience4j.retry.instances.inventory.wait-duration=5s

#list of server where kafka is currently running
spring.kafka.bootstrap-servers=localhost:9092
#so that you wouldn't be explicitly defining this topic every place you want to send message with kafka
spring.kafka.template.default-topic=order-placed
#serialize the key before sending
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
#serialize/convert the object to json before sending
#we arent using the below because we want to use schema registry afvro to manage our class creating and serialization
spring.kafka.producer.properties.spring.json.type.mapping=event:com.orderservice.event.OrderPlacedEvent
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
#spring.kafka.producer.value-serializer=io.confluent.kafka.serializers.KafkaAvroSerializer
#the url the schema registry points to
spring.kafka.producer.properties.schema.registry.url=http://127.0.0.1:8085
spring.kafka.properties.specific.avro.reader=true



