server.port= 8083

spring.application.name=ApiGateWayApplication

spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8181/realms/spring-boot-new-microservices-realm

#i.e http://localhost:8082/swagger-ui.html to access the documentation (note this is for the one in html form)
springdoc.swagger-ui.path=/swagger-ui.html
#i.e http://localhost:8082/api-docs to access the documentation (note this is for the one in json form)
springdoc.api-docs.path=/api-docs
#The properties below is so that we can aggregate the properties of other apis service together in one place
springdoc.swagger-ui.urls[0].name=Product Service
springdoc.swagger-ui.urls[0].url=aggregate/product-service/v3/api-docs

springdoc.swagger-ui.urls[1].name=Inventory Service
springdoc.swagger-ui.urls[1].url=aggregate/inventory-service/v3/api-docs

springdoc.swagger-ui.urls[2].name=Order Service
springdoc.swagger-ui.urls[2].url=aggregate/order-service/v3/api-docs

#enable the health metrics of the actuator for circuit breaker
management.health.circuitbreakers.enabled=true
#expose or metrics actuator endpoints. Note that you can choose to expose some not all
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always

resilience4j.circuitbreaker.configs.default.register-health-indicator=true
#based on counts i.e counts a number of request before the circuit breaker performs what it was designed to perform
resilience4j.circuitbreaker.configs.default.sliding-window-type=COUNT_BASED
#10 requests
resilience4j.circuitbreaker.configs.default.sliding-window-size=10
#if 50 percent of the 10 requests in sliding window fails
resilience4j.circuitbreaker.configs.default.failure-rate-threshold=50
#wait for 5secs in open state before it changes to another state to receive request
resilience4j.circuitbreaker.configs.default.wait-duration-in-open-state=5s
#only allows 3requests in half state
resilience4j.circuitbreaker.configs.default.permitted-number-of-calls-in-half-open-state=3
resilience4j.circuitbreaker.configs.default.automatic-transition-from-open-to-half-open-enabled=true
#it is with this property that the threshold of 50 percent is taking into consideration if not the circuitbreaker wouldn't open as it would ignore the threshold
resilience4j.circuitbreaker.configs.default.minimum-number-of-calls=5

#after like 50 percent threshold out of the 10 requests needed, the circuit breaker can change state.
#...if a timeout is reached several times, it will change the state of the circuit breaker
resilience4j.timelimiter.configs.default.timeout-duration=10s
#note when creating a timeout for the above property bearing in mind to consider or take note of the whole retries which is 3 in this case before assigning the number of seconds to the
#...timeout duration property above to avoid the timeout leaving the response and returning a timeout exception even when the request is still accessing another service positively.
#...That been said how does a Timeout works? if a timeout occurs when trying to access a service, it leaves the service without getting the response and continues any execution going down the line. now it returns a timeout exception/ fallback response if they was any for the timeout in the console and any other response it gets from the execution it got down the line if there was any


#Resilence4j Retry Properties
#retries 3 times before a timeout is reached
resilience4j.retry.configs.defaults.max-attempts=3

#waits for 2s before another retry
resilience4j.retry.configs.defaults.wait-duration=2s

